# LinkedList

class Node {
int i;
Node next;
}

class Linked {

 public Node insertFront(int i , Node node){  
            Node a = getNewNode(i);
            a.next = node;
            return a;
        }

// print 
public void printList(Node node) {
if(node == null )
{
return;
}
System.out.println(node.i+ " ");
printList(node.next);
}
private Node getNewNode(int i) {
Node a = new Node();
a.i = i;
a.next = null;
return a;
}

// Insert
public Node insert(int i , Node node) {
if(node == null) {
return getNewNode(i);
}

else {
node.next = insert(i,node.next);

}
return node;
}

public Node MiddleNode(Node node) {
    if(node == null) {
        return null;
    }
    Node a = node;
    Node b = node.next;
    while(b != null && b.next != null) {
        a = a.next;
        b = b.next.next;
    }
    return a;
}

public Node mergeSort(Node node){
    if(node == null || node.next == null){
        return node;
    }
    Node middle = MiddleNode(node);
    Node secondHaff = middle.next;
    middle.next = null;
    return merge(mergeSort(node),mergeSort(secondHaff));
}
public Node merge(Node a  , Node b) {
    Node temp = new Node();
    Node finalList = temp;
    while(a !=null && b !=null) {
        if(a.i < b.i) {
            temp.next = a;
            a=a.next;
            
        }
        else {
            temp.next=b;
            b=b.next;
        }
        temp=temp.next;
    }
    temp.next=(a == null) ? b:a;
    return finalList.next;
}
//main 
public static void main(String[] args){
Node root = null;
Linked a = new Linked();

root = a.insert(12 , root);
root = a.insert(99 , root);
root = a.insert(37 , root);


a.printList(root);
System.out.println();

Node sortedList = a.mergeSort(root);
a.printList(sortedList);
System.out.println();
}
}


java -cp /tmp/Zn6E9Y3UHq Linked
12 99 
37 

12 
37 
99 
